{"version":3,"sources":["components/TopicMenu.js","components/NavBar/NavBar.js","components/SideBar/SideBar.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["TopicMenu","topics","selectedKey","changeSelectedKey","styledTopics","forEach","topic","index","push","Item","key","onClick","mode","selectedKeys","NavBar","menu","useState","visible","setVisible","className","type","icon","MenuOutlined","title","placement","onClose","href","src","logo","height","alt","SideBar","Sider","breakpoint","theme","collapsedWidth","trigger","App","contentIndex","setContentIndex","setSelectedKey","Menu","event","Content","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"uRAmBeA,EAhBG,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,kBAClCC,EAAe,GASrB,OARAH,EAAOI,SAAQ,SAACC,EAAOC,GAAR,OACbH,EAAaI,KACX,kBAAC,IAAKC,KAAN,CAAWC,IAAKH,EAAOI,QAASR,GAC7BG,OAML,kBAAC,IAAD,CAAMM,KAAK,SAASC,aAAc,CAACX,IAChCE,I,8DCgBQU,EAzBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAAU,EACKC,oBAAS,GADd,mBAClBC,EADkB,KACTC,EADS,KAEzB,OACE,6BACE,kBAAC,IAAD,CACIC,UAAU,OACVC,KAAK,UACLC,KAAM,kBAACC,EAAA,EAAD,MACNX,QAAS,kBAAMO,GAAW,MAE9B,kBAAC,IAAD,CACMK,MAAM,SACNC,UAAU,OACVb,QAAS,kBAAMO,GAAW,IAC1BO,QAAS,kBAAMP,GAAW,IAC1BD,QAASA,GAEVF,GAEL,uBAAGW,KAAK,KAAI,yBAAKC,IAAKC,IAAMC,OAAO,OAAOC,IAAI,YCRrCC,G,OAdC,SAAC,GAAc,IAAZhB,EAAW,EAAXA,KACjB,OACE,kBAAC,IAAOiB,MAAR,CACEb,UAAU,UACVc,WAAY,KACZC,MAAM,QACNC,eAAgB,EAChBC,QAAS,MAENrB,KCoBMsB,MAvBf,WACE,IAAMpC,EAAS,CAAC,cAAe,eAAgB,eADlC,EAE2Be,mBAAS,GAFpC,mBAENsB,EAFM,KAEQC,EAFR,OAGyBvB,mBAAS,KAHlC,mBAGNd,EAHM,KAGOsC,EAHP,KASPC,EAAO,kBAAC,EAAD,CAAWxC,OAAQA,EAAQC,YAAaA,EAAaC,kBALxC,SAACuC,GACzB,IAAMhC,EAAMgC,EAAMhC,IAClB8B,EAAe9B,GACf6B,GAAiB7B,MAGnB,OACE,yBAAKS,UAAU,OACb,kBAAC,EAAD,CAAQJ,KAAM0B,IACd,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAS1B,KAAM0B,IACf,kBAAC,IAAOE,QAAR,KACG1C,EAAOqC,OCbEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.dd23e4b0.chunk.js","sourcesContent":["import React from \"react\";\nimport {Menu} from \"antd\";\n\nconst TopicMenu = ({ topics, selectedKey, changeSelectedKey }) => {\n  const styledTopics = [];\n  topics.forEach((topic, index) =>\n    styledTopics.push(\n      <Menu.Item key={index} onClick={changeSelectedKey}>\n        {topic}\n      </Menu.Item>\n    )\n  );\n\n  return (\n    <Menu mode=\"inline\" selectedKeys={[selectedKey]}>\n      {styledTopics}\n    </Menu>\n  );\n}\nexport default TopicMenu;\n","import React, {useState} from \"react\";\nimport {Drawer, Button} from \"antd\";\nimport {MenuOutlined} from \"@ant-design/icons\";\nimport \"./NavBar.css\";\nimport logo from './../../logo.svg';\n\nconst NavBar = ({menu}) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <nav>\n      <Button\n          className=\"menu\"\n          type=\"primary\"\n          icon={<MenuOutlined />}\n          onClick={() => setVisible(true)}\n      />\n      <Drawer\n            title=\"Topics\"\n            placement=\"left\"\n            onClick={() => setVisible(false)}\n            onClose={() => setVisible(false)}\n            visible={visible}\n          >\n          {menu}\n          </Drawer>\n      <a href=\"/\"><img src={logo} height=\"32px\" alt=\"logo\" /></a>\n      \n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport { Layout } from \"antd\";\nimport \"./SideBar.css\"\nconst SideBar = ({ menu }) => {\n  return (\n    <Layout.Sider\n      className=\"sidebar\"\n      breakpoint={\"lg\"}\n      theme=\"light\"\n      collapsedWidth={0}\n      trigger={null}\n    >\n        {menu}\n    </Layout.Sider>\n  );\n};\n\nexport default SideBar;","import React, {useState} from 'react';\nimport { Layout } from 'antd';\nimport TopicMenu from \"./components/TopicMenu\"\n\nimport './App.css';\n\nimport NavBar from \"./components/NavBar/NavBar\";\nimport SideBar from './components/SideBar/SideBar';\n\nfunction App() {\n  const topics = ['First topic', 'Second topic', 'Third topic']\n  const [contentIndex, setContentIndex] = useState(0)\n  const [selectedKey, setSelectedKey] = useState(\"0\");\n  const changeSelectedKey = (event) => {\n    const key = event.key\n    setSelectedKey(key)\n    setContentIndex(+key)\n  }\n  const Menu = <TopicMenu topics={topics} selectedKey={selectedKey} changeSelectedKey={changeSelectedKey}/>\n  return (\n    <div className=\"App\">\n      <NavBar menu={Menu}/>\n      <Layout>\n        <SideBar menu={Menu} />\n        <Layout.Content>\n          {topics[contentIndex]}\n        </Layout.Content>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}